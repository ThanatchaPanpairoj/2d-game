import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.Timer;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.event.KeyListener;
import java.awt.event.KeyEvent;

import java.awt.geom.Ellipse2D;

public class Game
{
    private static boolean left = false, right = false, up = false, down = false;
    private static final double diagonalMoveDistance = 5 / Math.sqrt(2);
    
    public static void main(String[] args)
    {
        JFrame frame = new JFrame();

        frame.setSize(1000, 700);
        frame.setTitle("Game");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLocationRelativeTo(null);
        frame.setResizable(false);
        frame.setVisible(true);

        //         frame.setUndecorated(true);
        //         frame.setShape(new Ellipse2D.Double(0,0, 800, 800));//circle frame?
        
        GridComponent grid = new GridComponent(frame.getWidth(), frame.getHeight());
        JPanel panel = new JPanel();
        panel.add(grid);
        panel.setVisible(true);
        frame.add(panel);

        UserObjectComponent userComponent = new UserObjectComponent(frame.getWidth(), frame.getHeight());
        frame.add(userComponent);
        userComponent.setFocusable(true);

        class TimeListener implements ActionListener {
            public void actionPerformed(ActionEvent e) {
                if (right && up && !left)
                    userComponent.moveBy(diagonalMoveDistance, -diagonalMoveDistance);
                else if (right && down && !left)
                    userComponent.moveBy(diagonalMoveDistance, diagonalMoveDistance);
                else if (left && up && !right)
                    userComponent.moveBy(-diagonalMoveDistance, -diagonalMoveDistance);
                else if (left && down && !right)
                    userComponent.moveBy(-diagonalMoveDistance, diagonalMoveDistance);
                else {
                    if (right)
                        userComponent.moveBy(5, 0);
                    if (left)
                        userComponent.moveBy(-5, 0);
                    if (up)
                        userComponent.moveBy(0, -5);
                    if (down)
                        userComponent.moveBy(0, 5);
                }
                userComponent.updateArrowKeys(left, right, up, down);
            }
        }

        class MotionWithKeyListener implements KeyListener {
            public void keyPressed(KeyEvent e)
            {
                if (e.getKeyCode() == KeyEvent.VK_LEFT)
                    left = true;
                else if (e.getKeyCode() == KeyEvent.VK_RIGHT)
                    right = true;
                else if (e.getKeyCode() == KeyEvent.VK_UP)
                    up = true; 
                else if (e.getKeyCode() == KeyEvent.VK_DOWN)
                    down = true;
            }

            public void keyReleased(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_LEFT)
                    left = false;
                else if (e.getKeyCode() == KeyEvent.VK_RIGHT)
                    right = false;
                else if (e.getKeyCode() == KeyEvent.VK_UP)
                    up = false;
                else if (e.getKeyCode() == KeyEvent.VK_DOWN)
                    down = false;
            }

            public void keyTyped(KeyEvent e) {}
        }

        ActionListener listener = new TimeListener();

        KeyListener keyListener = new MotionWithKeyListener();
        userComponent.addKeyListener(keyListener);

        final int DELAY = 1000 / 60;//60 frames per second
        Timer t = new Timer(DELAY, listener);
        t.start();
    }
}
